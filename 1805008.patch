diff --git a/.vscode/c_cpp_properties.json b/.vscode/c_cpp_properties.json
new file mode 100644
index 0000000..72aa9ac
--- /dev/null
+++ b/.vscode/c_cpp_properties.json
@@ -0,0 +1,18 @@
+{
+    "configurations": [
+        {
+            "name": "Linux",
+            "includePath": [
+                "${workspaceFolder}/**",
+                "${workspaceFolder}"
+            ],
+            "defines": [],
+            "compilerPath": "/usr/bin/gcc",
+            "cStandard": "gnu17",
+            "cppStandard": "gnu++14",
+            "intelliSenseMode": "linux-gcc-x64",
+            "configurationProvider": "ms-vscode.makefile-tools"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..f210aec
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,15 @@
+{
+    "files.associations": {
+        "user.h": "c",
+        "types.h": "c",
+        "stat.h": "c",
+        "fcntl.h": "c",
+        "memlayout.h": "c",
+        "defs.h": "c",
+        "proc.h": "c",
+        "param.h": "c",
+        "riscv.h": "c",
+        "pstat.h": "c",
+        "spinlock.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..5fff1f1 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/random.o \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test\
+	$U/_testticket\
+	$U/_testprocinfo\
+
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +159,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..41dfe60 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             setTicket(int n);
+int             getpinfo(struct pstat *);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -185,5 +188,9 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+
+// random.c
+uint32 next_random();
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..058c3b4 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -114,6 +115,9 @@ allocproc(void)
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+      p->tickets_current = 1;
+      p->tickets_original = 1;
+      p->time_slices = 0;
       goto found;
     } else {
       release(&p->lock);
@@ -169,6 +173,10 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tickets_current = 0;
+  p->time_slices = 0;
+  p->tickets_original = 0;
+
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -288,6 +296,15 @@ fork(void)
     return -1;
   }
 
+  int parentTickets;
+
+  acquire(&p->lock);
+  parentTickets = p->tickets_original;
+  release(&p->lock);
+  np->tickets_original = parentTickets;
+  np->tickets_current = parentTickets;
+
+  
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -434,6 +451,8 @@ wait(uint64 addr)
   }
 }
 
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -447,30 +466,68 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   
+
+  int totalRunnableTickets;
+  int lowerBound;
+  int currTicket;
+    
+
+ 
   c->proc = 0;
   for(;;){
-    // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
+    totalRunnableTickets = 0;
+    lowerBound = 0;
+
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+        totalRunnableTickets += p->tickets_current;
+      }
+      release(&p->lock);
+    }
+
+    if(!totalRunnableTickets){
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        p->tickets_current = p->tickets_original;
+        if(p->state == RUNNABLE)
+          totalRunnableTickets += p->tickets_original;
+        release(&p->lock);
+      }
+    }
+
+
+    currTicket = next_random() % totalRunnableTickets;
+
+    
+
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE) {
+
+        lowerBound += p->tickets_current;
+        if(currTicket < lowerBound){
+          p->state = RUNNING;
+          c->proc = p;
+          p->time_slices += 1;
+          swtch(&c->context, &p->context);
+          p->tickets_current -= 1 ;
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+
+          c->proc = 0;
+          release(&p->lock);
+          break;
+        }
       }
       release(&p->lock);
     }
   }
 }
 
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -681,3 +738,35 @@ procdump(void)
     printf("\n");
   }
 }
+
+int setTicket(int n){
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->tickets_original = n;
+  p->tickets_current = n;
+  release(&p->lock);
+  return 0;
+}
+
+int getpinfo(struct pstat *s){
+  
+  struct proc *p;
+  int r;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      s->pid[i] = p->pid;
+      if(p->state == UNUSED){
+        r = 0;
+      }
+      else
+        r = 1;
+      s->inuse[i] = r;
+      s->tickets_original[i] = p->tickets_original;
+      s->tickets_current[i] = p->tickets_current;
+      s->time_slices[i] = p->time_slices;
+      release(&p->lock);
+      ++i;
+    }
+  return 0; 
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..e3f0e03 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets_current;
+  int tickets_original;
+  int time_slices;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..15fa3e5
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process  originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..c0297b4
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,27 @@
+// taken from
+// https://www.cs.virginia.edu/~cr4bd/4414/F2018/files/lcg_parkmiller_c.txt
+
+
+#define RANDOM_MAX ((1u << 31u) - 1u)
+
+static unsigned random_seed = 1;
+
+unsigned lcg_parkmiller(unsigned *state)
+{
+    const unsigned N = 0x7fffffff;
+    const unsigned G = 48271u;
+
+    unsigned div = *state / (N / G);  
+    unsigned rem = *state % (N / G);  
+
+    unsigned a = rem * G;        
+    unsigned b = div * (N % G);  
+
+    return *state = (a > b) ? (a - b) : (a + (N - b));
+}
+
+unsigned next_random() {
+    return lcg_parkmiller(&random_seed);
+}
+
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6bf1105 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_getpinfo(void);
+extern uint64 sys_settickets(void);
+
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +130,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getpinfo]  sys_getpinfo,
+[SYS_settickets]  sys_settickets
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9103a43 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getpinfo 22
+#define SYS_settickets 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..2565941 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_getpinfo(){
+  uint64 addr;
+  argaddr(0, &addr);
+  struct pstat s;
+  struct proc *p = myproc();
+  
+  // struct pstat *t = (struct pstat*) addr;
+
+  getpinfo(&s);
+
+  if(copyout(p->pagetable, addr, (char *)&s,sizeof(s)) == -1){
+    return -1;
+  }
+  
+  return 0;
+}
+
+uint64 sys_settickets(){
+  int n;
+  argint(0, &n);
+  if(n < 0){
+    return -1;
+  }
+  setTicket(n);
+  return 0;
+}
\ No newline at end of file
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..e47ceec
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,24 @@
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+
+void printPstat(struct pstat *s){
+    printf("PID  | In Use | Original Tickets | Current Tickets | Time Slice\n");
+    for(int i = 0; i < NPROC; ++i){
+    printf("%d    | %d      |%d              |%d               |%d\n",s->pid[i], 
+        s->inuse[i], s->tickets_original[i], s->tickets_current[i], s->time_slices[i]);
+    }
+}
+
+int main(){
+    struct pstat stat;
+
+    settickets(100);
+    getpinfo(&stat);
+    printPstat(&stat);
+    // random();
+
+    return 0;
+
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..cd0a3f7
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+
+void printPstat(struct pstat *s){
+    printf("Only used processes are shown\nPID|In Use|Original Tickets|Current Tickets|Time Slice\n");
+    for(int i = 0; i < NPROC; ++i){
+        if(s->inuse[i] != 0)
+        printf("%d\t|%d\t|%d\t|%d\t|%d\n",s->pid[i], 
+            s->inuse[i], s->tickets_original[i], s->tickets_current[i], s->time_slices[i]);
+    }
+}
+
+
+
+
+int main(){
+
+    settickets(10000); // so that testprocinfo gets scheduled quickly
+    struct pstat stat;
+    getpinfo(&stat);
+    printPstat(&stat);
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..4622802
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,55 @@
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+
+int setTickets(int n){
+    if(settickets(n) == -1){
+        printf("set tickets of process: %d failed\n", getpid());
+        return -1;
+    }
+    else{
+        printf("tickets of process: %d set to %d\n", getpid(), n);
+    }
+    return 1;
+}
+
+int main(int argc, char** argv){
+    int tickets = 1;
+    if(argc < 2){
+        printf("default ticket number %d used\n",tickets );
+    }
+    else{
+        tickets = atoi(argv[1]);
+    }
+    setTickets(tickets);
+
+
+    // while(1);
+
+
+    // if(fork() == 0){
+    //     // settickets(5);
+    //     setTickets(tickets * 3);
+        
+    //     if(fork() == 0){
+    //         setTickets(tickets > 1 ? (tickets / 2) : 1);
+    //         // settickets(3);
+    //     }
+
+    //     if(fork() == 0){
+    //         setTickets(tickets * 2);
+    //         // settickets(3);
+    //     }
+    //     // if(fork() == 0){
+    //     //     setTickets(tickets);
+    //     //     // settickets(3);
+    //     // }
+        
+        
+    //     while(1);
+    // }
+
+    while(1);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..6e0bcd7 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getpinfo(struct pstat*);
+int settickets(int n);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..06e9c3b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getpinfo");
+entry("settickets");
+
